/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LogDb, LogDbInterface } from "../LogDb";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    name: "DataEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    name: "storeData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061015d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063fb218f5f14610030575b600080fd5b6100a76004803603602081101561004657600080fd5b810190808035906020019064010000000081111561006357600080fd5b82018360208201111561007557600080fd5b8035906020019184600183028401116401000000008311171561009757600080fd5b90919293919293905050506100a9565b005b3373ffffffffffffffffffffffffffffffffffffffff167f75d95bfb0856ee387afb3033c925a8d1f89db17d9c0385954efd7bbd19eeb5d6838360405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a2505056fea264697066735822122028ccde9d4a5114b24bc578c8755f112da6844cabe774506fc70e39976fd31a2b64736f6c63430007030033";

type LogDbConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LogDbConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LogDb__factory extends ContractFactory {
  constructor(...args: LogDbConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LogDb> {
    return super.deploy(overrides || {}) as Promise<LogDb>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LogDb {
    return super.attach(address) as LogDb;
  }
  connect(signer: Signer): LogDb__factory {
    return super.connect(signer) as LogDb__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LogDbInterface {
    return new utils.Interface(_abi) as LogDbInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): LogDb {
    return new Contract(address, _abi, signerOrProvider) as LogDb;
  }
}
